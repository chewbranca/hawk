#!/usr/bin/env awk -f 

# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.


#
# HAWK - Histograms in AWK
#


BEGIN {
    lines = 0;
    min = 0
    max = 0;
    bail = 0;
}

{
    if ($1 < max) {
        error_and_bail("Input *must* be sorted....")
    }

    if (min == 0) {
        min = $1
    }

    max = $1
    xs[lines] = $1
    lines++
}

END {
    if (bail == 1) {
        exit 1;
    }

    iqr = IQR(xs)
    bs = bin_size(xs)
    total_bins = ceiling(max / bs)

    for (i = 1; i < total_bins; i++) {
        bins[i] = 0
        n_bins[i] = 0
    }

    for (l = 0; l < lines; l++) {
        j = ceiling(xs[l] / bs)
        bins[j] += 1
    }

    # can't return an array, so supply a ref to n_bins destination array
    normalized(bins, n_bins)

    # print_numeric_histogram
    #for (i = 1; i <= total_bins; i++) {
    #    ccount += bins[i]
    #    print "[", i, "] ", "<", ((i)*bs), " ", bins[i], " -- n_xs: ", n_bins[i]
    #}


    print "IQR ", iqr
    print "Bin Size ", bs
    print "MIN||MAX:: ", xs[0], "||", xs[lines-1]
    print "Total bins: ", max / bs
    print "Length of xs ", length(xs), " and total lines ", lines;

    print_vertical_histogram(n_bins, bs, 60)
}


function IQR(xs) {
    len = length(xs)
    Q1 = 0
    Q3 = 0
    if (len % 2 == 0) {
        n = len / 2
        Q1_i = n / 2
        Q3_i = 3 * n / 2
        Q1 = xs[Q1_i]
        Q3 = xs[Q3_i] 
    } else {
        error_and_bail("ERROR: only even amounts of data are supported at this time")
    }

    return Q3 - Q1
}


function error_and_bail(msg,    bail) {
    print msg
    bail = 1
    exit 1
}


# Use the Freedman-Diaconis rule to calculate the histogram bin size
# https://en.wikipedia.org/wiki/Freedmanâ€“Diaconis_rule
#
# bin_size = 2 * IQR(xs) / cube_root(length(xs))
function bin_size(xs) {
    iqr = IQR(xs)
    len = length(xs)
    cube_root = len^(1/3)

    return int(2 * iqr / cube_root)
}


function ceiling(x) {
    if (x == int(x)) {
        return x
    } else {
        return int(x) + 1
    }
}


function normalized(xs, n_xs) {
    len = length(xs)
    min = xs[0]
    max = 0

    for (i = 1; i <= len; i++) {
        if (xs[i] < min) {
            min = xs[i]
        }

        if (xs[i] > max) {
            max = xs[i]
        }
    }

    for (i = 1; i <= len; i++) {
        n_xs[i] = (xs[i] - min) / (max - min)
    }
}


function print_vertical_histogram(n_xs, bs, width) {
    len = length(n_xs)


    printf "Displaying histogram: \n\n"
    printf "  RANGE   ||  COUNT\n\n"
    for (i = 0; i < width + 13; i++) {
        printf "="
    }
    printf "\n\n"

    for (i = 1; i <= len; i++) {
        x = n_xs[i]
        k = ceiling(x * width)

        if (x == 0) {
            printf "< %-7i || \n", (i*bs)
        } else {
            printf "< %-7i || ", (i*bs)
            for (j = 0; j < k; j++) {
                printf "*"
            }
            printf "\n"
        }
    }
}
